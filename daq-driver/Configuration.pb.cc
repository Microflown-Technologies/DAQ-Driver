// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Configuration.proto

#include "Configuration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Configuration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BNC_Configuration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Configuration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lemo_Configuration_2eproto;
class LemoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lemo> _instance;
} _Lemo_default_instance_;
class BNCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BNC> _instance;
} _BNC_default_instance_;
class VoyagerConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoyagerConfiguration> _instance;
} _VoyagerConfiguration_default_instance_;
static void InitDefaultsscc_info_BNC_Configuration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BNC_default_instance_;
    new (ptr) ::BNC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BNC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BNC_Configuration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BNC_Configuration_2eproto}, {}};

static void InitDefaultsscc_info_Lemo_Configuration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Lemo_default_instance_;
    new (ptr) ::Lemo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lemo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lemo_Configuration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Lemo_Configuration_2eproto}, {}};

static void InitDefaultsscc_info_VoyagerConfiguration_Configuration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VoyagerConfiguration_default_instance_;
    new (ptr) ::VoyagerConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VoyagerConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VoyagerConfiguration_Configuration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_VoyagerConfiguration_Configuration_2eproto}, {
      &scc_info_BNC_Configuration_2eproto.base,
      &scc_info_Lemo_Configuration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Configuration_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Configuration_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Configuration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Configuration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Lemo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Lemo, gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BNC, gain_),
  PROTOBUF_FIELD_OFFSET(::BNC, iepe_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, audiodata_),
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, samplingfrequency_),
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, bnc1_),
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, bnc2_),
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, lemo_),
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, channelcount_),
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, samplesize_),
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, selectedchannels_),
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, timestamp_),
  PROTOBUF_FIELD_OFFSET(::VoyagerConfiguration, command_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Lemo)},
  { 6, -1, sizeof(::BNC)},
  { 13, -1, sizeof(::VoyagerConfiguration)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Lemo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BNC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VoyagerConfiguration_default_instance_),
};

const char descriptor_table_protodef_Configuration_2eproto[] =
  "\n\023Configuration.proto\"\033\n\004Lemo\022\023\n\004Gain\030\001 "
  "\001(\0162\005.Gain\"/\n\003BNC\022\023\n\004Gain\030\001 \001(\0162\005.Gain\022\023"
  "\n\004Iepe\030\002 \001(\0162\005.Iepe\"\351\001\n\024VoyagerConfigura"
  "tion\022\021\n\taudioData\030\001 \001(\014\022\031\n\021samplingFrequ"
  "ency\030\002 \001(\r\022\022\n\004BNC1\030\003 \001(\0132\004.BNC\022\022\n\004BNC2\030\004"
  " \001(\0132\004.BNC\022\023\n\004Lemo\030\005 \001(\0132\005.Lemo\022\024\n\014chann"
  "elCount\030\006 \001(\r\022\022\n\nsampleSize\030\007 \001(\r\022\030\n\020sel"
  "ectedChannels\030\010 \001(\r\022\021\n\ttimestamp\030\t \001(\004\022\017"
  "\n\007command\030\n \001(\t*%\n\004Gain\022\007\n\003LOW\020\000\022\n\n\006MEDI"
  "UM\020\001\022\010\n\004HIGH\020\002*$\n\004Iepe\022\007\n\003OFF\020\000\022\006\n\002ON\020\001\022"
  "\013\n\007NOTUSED\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Configuration_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Configuration_2eproto_sccs[3] = {
  &scc_info_BNC_Configuration_2eproto.base,
  &scc_info_Lemo_Configuration_2eproto.base,
  &scc_info_VoyagerConfiguration_Configuration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Configuration_2eproto_once;
static bool descriptor_table_Configuration_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Configuration_2eproto = {
  &descriptor_table_Configuration_2eproto_initialized, descriptor_table_protodef_Configuration_2eproto, "Configuration.proto", 420,
  &descriptor_table_Configuration_2eproto_once, descriptor_table_Configuration_2eproto_sccs, descriptor_table_Configuration_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_Configuration_2eproto::offsets,
  file_level_metadata_Configuration_2eproto, 3, file_level_enum_descriptors_Configuration_2eproto, file_level_service_descriptors_Configuration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Configuration_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Configuration_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gain_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[0];
}
bool Gain_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Iepe_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Configuration_2eproto);
  return file_level_enum_descriptors_Configuration_2eproto[1];
}
bool Iepe_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Lemo::InitAsDefaultInstance() {
}
class Lemo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lemo::kGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lemo::Lemo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lemo)
}
Lemo::Lemo(const Lemo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gain_ = from.gain_;
  // @@protoc_insertion_point(copy_constructor:Lemo)
}

void Lemo::SharedCtor() {
  gain_ = 0;
}

Lemo::~Lemo() {
  // @@protoc_insertion_point(destructor:Lemo)
  SharedDtor();
}

void Lemo::SharedDtor() {
}

void Lemo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lemo& Lemo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lemo_Configuration_2eproto.base);
  return *internal_default_instance();
}


void Lemo::Clear() {
// @@protoc_insertion_point(message_clear_start:Lemo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gain_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lemo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Gain Gain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gain(static_cast<::Gain>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lemo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lemo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gain Gain = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gain(static_cast< ::Gain >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lemo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lemo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lemo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lemo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gain Gain = 1;
  if (this->gain() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->gain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Lemo)
}

::PROTOBUF_NAMESPACE_ID::uint8* Lemo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lemo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gain Gain = 1;
  if (this->gain() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->gain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lemo)
  return target;
}

size_t Lemo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lemo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Gain Gain = 1;
  if (this->gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gain());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lemo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lemo)
  GOOGLE_DCHECK_NE(&from, this);
  const Lemo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lemo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lemo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lemo)
    MergeFrom(*source);
  }
}

void Lemo::MergeFrom(const Lemo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lemo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gain() != 0) {
    set_gain(from.gain());
  }
}

void Lemo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lemo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lemo::CopyFrom(const Lemo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lemo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lemo::IsInitialized() const {
  return true;
}

void Lemo::Swap(Lemo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lemo::InternalSwap(Lemo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gain_, other->gain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lemo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BNC::InitAsDefaultInstance() {
}
class BNC::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BNC::kGainFieldNumber;
const int BNC::kIepeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BNC::BNC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BNC)
}
BNC::BNC(const BNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gain_, &from.gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&iepe_) -
    reinterpret_cast<char*>(&gain_)) + sizeof(iepe_));
  // @@protoc_insertion_point(copy_constructor:BNC)
}

void BNC::SharedCtor() {
  ::memset(&gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iepe_) -
      reinterpret_cast<char*>(&gain_)) + sizeof(iepe_));
}

BNC::~BNC() {
  // @@protoc_insertion_point(destructor:BNC)
  SharedDtor();
}

void BNC::SharedDtor() {
}

void BNC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BNC& BNC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BNC_Configuration_2eproto.base);
  return *internal_default_instance();
}


void BNC::Clear() {
// @@protoc_insertion_point(message_clear_start:BNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iepe_) -
      reinterpret_cast<char*>(&gain_)) + sizeof(iepe_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BNC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Gain Gain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gain(static_cast<::Gain>(val));
        } else goto handle_unusual;
        continue;
      // .Iepe Iepe = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_iepe(static_cast<::Iepe>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BNC::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BNC)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Gain Gain = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gain(static_cast< ::Gain >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Iepe Iepe = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_iepe(static_cast< ::Iepe >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BNC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BNC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BNC::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gain Gain = 1;
  if (this->gain() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->gain(), output);
  }

  // .Iepe Iepe = 2;
  if (this->iepe() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->iepe(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BNC)
}

::PROTOBUF_NAMESPACE_ID::uint8* BNC::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BNC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Gain Gain = 1;
  if (this->gain() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->gain(), target);
  }

  // .Iepe Iepe = 2;
  if (this->iepe() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->iepe(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BNC)
  return target;
}

size_t BNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BNC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Gain Gain = 1;
  if (this->gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gain());
  }

  // .Iepe Iepe = 2;
  if (this->iepe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->iepe());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BNC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BNC)
  GOOGLE_DCHECK_NE(&from, this);
  const BNC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BNC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BNC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BNC)
    MergeFrom(*source);
  }
}

void BNC::MergeFrom(const BNC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BNC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gain() != 0) {
    set_gain(from.gain());
  }
  if (from.iepe() != 0) {
    set_iepe(from.iepe());
  }
}

void BNC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BNC::CopyFrom(const BNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BNC::IsInitialized() const {
  return true;
}

void BNC::Swap(BNC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BNC::InternalSwap(BNC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gain_, other->gain_);
  swap(iepe_, other->iepe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BNC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoyagerConfiguration::InitAsDefaultInstance() {
  ::_VoyagerConfiguration_default_instance_._instance.get_mutable()->bnc1_ = const_cast< ::BNC*>(
      ::BNC::internal_default_instance());
  ::_VoyagerConfiguration_default_instance_._instance.get_mutable()->bnc2_ = const_cast< ::BNC*>(
      ::BNC::internal_default_instance());
  ::_VoyagerConfiguration_default_instance_._instance.get_mutable()->lemo_ = const_cast< ::Lemo*>(
      ::Lemo::internal_default_instance());
}
class VoyagerConfiguration::HasBitSetters {
 public:
  static const ::BNC& bnc1(const VoyagerConfiguration* msg);
  static const ::BNC& bnc2(const VoyagerConfiguration* msg);
  static const ::Lemo& lemo(const VoyagerConfiguration* msg);
};

const ::BNC&
VoyagerConfiguration::HasBitSetters::bnc1(const VoyagerConfiguration* msg) {
  return *msg->bnc1_;
}
const ::BNC&
VoyagerConfiguration::HasBitSetters::bnc2(const VoyagerConfiguration* msg) {
  return *msg->bnc2_;
}
const ::Lemo&
VoyagerConfiguration::HasBitSetters::lemo(const VoyagerConfiguration* msg) {
  return *msg->lemo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoyagerConfiguration::kAudioDataFieldNumber;
const int VoyagerConfiguration::kSamplingFrequencyFieldNumber;
const int VoyagerConfiguration::kBNC1FieldNumber;
const int VoyagerConfiguration::kBNC2FieldNumber;
const int VoyagerConfiguration::kLemoFieldNumber;
const int VoyagerConfiguration::kChannelCountFieldNumber;
const int VoyagerConfiguration::kSampleSizeFieldNumber;
const int VoyagerConfiguration::kSelectedChannelsFieldNumber;
const int VoyagerConfiguration::kTimestampFieldNumber;
const int VoyagerConfiguration::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoyagerConfiguration::VoyagerConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoyagerConfiguration)
}
VoyagerConfiguration::VoyagerConfiguration(const VoyagerConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  audiodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.audiodata().size() > 0) {
    audiodata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audiodata_);
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.command().size() > 0) {
    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.has_bnc1()) {
    bnc1_ = new ::BNC(*from.bnc1_);
  } else {
    bnc1_ = nullptr;
  }
  if (from.has_bnc2()) {
    bnc2_ = new ::BNC(*from.bnc2_);
  } else {
    bnc2_ = nullptr;
  }
  if (from.has_lemo()) {
    lemo_ = new ::Lemo(*from.lemo_);
  } else {
    lemo_ = nullptr;
  }
  ::memcpy(&samplingfrequency_, &from.samplingfrequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&samplingfrequency_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:VoyagerConfiguration)
}

void VoyagerConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoyagerConfiguration_Configuration_2eproto.base);
  audiodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bnc1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&bnc1_)) + sizeof(timestamp_));
}

VoyagerConfiguration::~VoyagerConfiguration() {
  // @@protoc_insertion_point(destructor:VoyagerConfiguration)
  SharedDtor();
}

void VoyagerConfiguration::SharedDtor() {
  audiodata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bnc1_;
  if (this != internal_default_instance()) delete bnc2_;
  if (this != internal_default_instance()) delete lemo_;
}

void VoyagerConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoyagerConfiguration& VoyagerConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoyagerConfiguration_Configuration_2eproto.base);
  return *internal_default_instance();
}


void VoyagerConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:VoyagerConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audiodata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && bnc1_ != nullptr) {
    delete bnc1_;
  }
  bnc1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bnc2_ != nullptr) {
    delete bnc2_;
  }
  bnc2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lemo_ != nullptr) {
    delete lemo_;
  }
  lemo_ = nullptr;
  ::memset(&samplingfrequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&samplingfrequency_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoyagerConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes audioData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_audiodata(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 samplingFrequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          samplingfrequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BNC BNC1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bnc1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BNC BNC2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_bnc2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Lemo Lemo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_lemo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channelCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          channelcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sampleSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          samplesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 selectedChannels = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          selectedchannels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_command(), ptr, ctx, "VoyagerConfiguration.command");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoyagerConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoyagerConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes audioData = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audiodata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 samplingFrequency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samplingfrequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BNC BNC1 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bnc1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BNC BNC2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bnc2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lemo Lemo = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lemo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channelCount = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sampleSize = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samplesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 selectedChannels = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selectedchannels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string command = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->command().data(), static_cast<int>(this->command().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "VoyagerConfiguration.command"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoyagerConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoyagerConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoyagerConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoyagerConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audioData = 1;
  if (this->audiodata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audiodata(), output);
  }

  // uint32 samplingFrequency = 2;
  if (this->samplingfrequency() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->samplingfrequency(), output);
  }

  // .BNC BNC1 = 3;
  if (this->has_bnc1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::bnc1(this), output);
  }

  // .BNC BNC2 = 4;
  if (this->has_bnc2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::bnc2(this), output);
  }

  // .Lemo Lemo = 5;
  if (this->has_lemo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::lemo(this), output);
  }

  // uint32 channelCount = 6;
  if (this->channelcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->channelcount(), output);
  }

  // uint32 sampleSize = 7;
  if (this->samplesize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->samplesize(), output);
  }

  // uint32 selectedChannels = 8;
  if (this->selectedchannels() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->selectedchannels(), output);
  }

  // uint64 timestamp = 9;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->timestamp(), output);
  }

  // string command = 10;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), static_cast<int>(this->command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VoyagerConfiguration.command");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoyagerConfiguration)
}

::PROTOBUF_NAMESPACE_ID::uint8* VoyagerConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoyagerConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audioData = 1;
  if (this->audiodata().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->audiodata(), target);
  }

  // uint32 samplingFrequency = 2;
  if (this->samplingfrequency() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->samplingfrequency(), target);
  }

  // .BNC BNC1 = 3;
  if (this->has_bnc1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::bnc1(this), target);
  }

  // .BNC BNC2 = 4;
  if (this->has_bnc2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::bnc2(this), target);
  }

  // .Lemo Lemo = 5;
  if (this->has_lemo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::lemo(this), target);
  }

  // uint32 channelCount = 6;
  if (this->channelcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->channelcount(), target);
  }

  // uint32 sampleSize = 7;
  if (this->samplesize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->samplesize(), target);
  }

  // uint32 selectedChannels = 8;
  if (this->selectedchannels() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->selectedchannels(), target);
  }

  // uint64 timestamp = 9;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->timestamp(), target);
  }

  // string command = 10;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), static_cast<int>(this->command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "VoyagerConfiguration.command");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoyagerConfiguration)
  return target;
}

size_t VoyagerConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VoyagerConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes audioData = 1;
  if (this->audiodata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->audiodata());
  }

  // string command = 10;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->command());
  }

  // .BNC BNC1 = 3;
  if (this->has_bnc1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bnc1_);
  }

  // .BNC BNC2 = 4;
  if (this->has_bnc2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bnc2_);
  }

  // .Lemo Lemo = 5;
  if (this->has_lemo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lemo_);
  }

  // uint32 samplingFrequency = 2;
  if (this->samplingfrequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->samplingfrequency());
  }

  // uint32 channelCount = 6;
  if (this->channelcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->channelcount());
  }

  // uint32 sampleSize = 7;
  if (this->samplesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->samplesize());
  }

  // uint32 selectedChannels = 8;
  if (this->selectedchannels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->selectedchannels());
  }

  // uint64 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoyagerConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VoyagerConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const VoyagerConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoyagerConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VoyagerConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VoyagerConfiguration)
    MergeFrom(*source);
  }
}

void VoyagerConfiguration::MergeFrom(const VoyagerConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VoyagerConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audiodata().size() > 0) {

    audiodata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audiodata_);
  }
  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.has_bnc1()) {
    mutable_bnc1()->::BNC::MergeFrom(from.bnc1());
  }
  if (from.has_bnc2()) {
    mutable_bnc2()->::BNC::MergeFrom(from.bnc2());
  }
  if (from.has_lemo()) {
    mutable_lemo()->::Lemo::MergeFrom(from.lemo());
  }
  if (from.samplingfrequency() != 0) {
    set_samplingfrequency(from.samplingfrequency());
  }
  if (from.channelcount() != 0) {
    set_channelcount(from.channelcount());
  }
  if (from.samplesize() != 0) {
    set_samplesize(from.samplesize());
  }
  if (from.selectedchannels() != 0) {
    set_selectedchannels(from.selectedchannels());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void VoyagerConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VoyagerConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoyagerConfiguration::CopyFrom(const VoyagerConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VoyagerConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoyagerConfiguration::IsInitialized() const {
  return true;
}

void VoyagerConfiguration::Swap(VoyagerConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoyagerConfiguration::InternalSwap(VoyagerConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  audiodata_.Swap(&other->audiodata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bnc1_, other->bnc1_);
  swap(bnc2_, other->bnc2_);
  swap(lemo_, other->lemo_);
  swap(samplingfrequency_, other->samplingfrequency_);
  swap(channelcount_, other->channelcount_);
  swap(samplesize_, other->samplesize_);
  swap(selectedchannels_, other->selectedchannels_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoyagerConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Lemo* Arena::CreateMaybeMessage< ::Lemo >(Arena* arena) {
  return Arena::CreateInternal< ::Lemo >(arena);
}
template<> PROTOBUF_NOINLINE ::BNC* Arena::CreateMaybeMessage< ::BNC >(Arena* arena) {
  return Arena::CreateInternal< ::BNC >(arena);
}
template<> PROTOBUF_NOINLINE ::VoyagerConfiguration* Arena::CreateMaybeMessage< ::VoyagerConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::VoyagerConfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
